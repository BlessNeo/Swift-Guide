import UIKit

//在类实例被释放的时候，反初始化器就会立即被调用。你可以是用 deinit 关键字来写反初始化器，就如同写初始化器要用 init 关键字一样。反初始化器只在类类型中有效。
//当实例不再被需要的时候 Swift会自动将其释放掉，以节省资源。如同自动引用计数中描述的那样，Swift 通过自动引用计数（ARC）来处理实例的内存管理。基本上，当你的实例被释放时，你不需要手动清除它们。总之，当你在操作自己的资源时，你可能还是需要在释放实例时执行一些额外的清理工作。比如说，如果你创建了一个自定义类来打开某文件写点数据进去，你就得在实例释放之前关闭这个文件。

//每个类当中只能有一个反初始化器。反初始化器不接收任何形式参数，并且不需要写圆括号：

//deinit {
//    // perform the deinitialization
//}
